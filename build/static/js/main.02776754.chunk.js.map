{"version":3,"sources":["logo.svg","reducers/message.js","reducers/todo.js","components/TodoForm.js","services/todoService.js","components/TodoList.js","components/Message.js","components/Footer.js","App.js","serviceWorker.js","store.js","index.js"],"names":["module","exports","showMessage","payload","type","initState","todos","currentTodo","ADD_TODO","UPDATE_TODO","DELETE_TODO","getVisibleTodos","filter","t","isComplete","TodoForm","handleInputChange","evt","val","target","value","props","updateCurrent","handleSubmit","preventDefault","addNewTodo","this","onSubmit","onChange","Component","connect","state","todo","name","dispatch","fetch","process","method","headers","Accept","body","JSON","stringify","then","res","json","createTodo","addTodo","TodoItem","id","toggleTodo","deleteTodo","className","onClick","checked","TodoList","fetchTodos","map","key","updateExistingTodo","deleteTodoById","ownProps","loadTodos","updateTodo","modifyTodo","message","to","App","src","logo","alt","path","render","match","params","Footer","Boolean","window","location","hostname","reducer","combineReducers","action","index","findIndex","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.02776754.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import { ADD_TODO, UPDATE_TODO, DELETE_TODO } from './todo';\n\nconst MESSAGE_SHOW = 'MESSAGE_SHOW';\n\nexport const showMessage = (payload) => ({ type: MESSAGE_SHOW, payload });\n\nexport default function (state = '', action) {\n  switch (action.type) {\n    case MESSAGE_SHOW:\n      return action.payload;\n    case ADD_TODO:\n    case UPDATE_TODO:\n    case DELETE_TODO:\n      return '';\n    default:\n      return state;\n  }\n}\n","import { getTodos, createTodo, updateTodo, deleteTodo } from '../services/todoService';\nimport { showMessage } from './message';\n\nconst initState = {\n  todos: [],\n  currentTodo: '',\n};\n\nexport const ADD_TODO = 'ADD_TODO';\nconst LOAD_TODOS = 'LOAD_TODOS';\nconst CURRENT_UPDATE = 'CURRENT_UPDATE';\nexport const UPDATE_TODO = 'UPDATE_TODO';\nexport const DELETE_TODO = 'DELETE_TODO';\n\nexport const updateCurrent = (payload) => ({ type: CURRENT_UPDATE, payload });\nexport const loadTodos = (payload) => ({ type: LOAD_TODOS, payload });\nexport const addTodo = (payload) => ({ type: ADD_TODO, payload });\nexport const modifyTodo = (payload) => ({ type: UPDATE_TODO, payload });\nexport const removeTodo = (payload) => ({ type: DELETE_TODO, payload });\n\nexport const fetchTodos = () => {\n  return (dispatch) => {\n    getTodos().then((payload) => dispatch(loadTodos(payload)));\n  };\n};\n\nexport const addNewTodo = (name) => {\n  return (dispatch) => {\n    dispatch(showMessage('Saving Todo'));\n    createTodo(name).then((payload) => dispatch(addTodo(payload)));\n  };\n};\n\nexport const updateExistingTodo = (todo) => {\n  return (dispatch) => {\n    dispatch(showMessage('Updating Todo'));\n    updateTodo(todo).then((payload) => dispatch(modifyTodo(payload)));\n  };\n};\n\nexport const deleteTodoById = (id) => {\n  return (dispatch) => {\n    dispatch(showMessage('Updating Todo'));\n    deleteTodo(id).then(() => dispatch(removeTodo(id)));\n  };\n};\n\nexport const getVisibleTodos = (todos, filter) => {\n  switch (filter) {\n    case 'active':\n      return todos.filter((t) => !t.isComplete);\n    case 'completed':\n      return todos.filter((t) => t.isComplete);\n    default:\n      return todos;\n  }\n};\n\nexport default (state = initState, action) => {\n  switch (action.type) {\n    case LOAD_TODOS:\n      return { ...state, todos: action.payload };\n    case ADD_TODO:\n      return { ...state, currentTodo: '', todos: [...state.todos, action.payload] };\n    case UPDATE_TODO:\n      const index = state.todos.findIndex((t) => t.id === action.payload.id);\n      state.todos[index] = action.payload;\n      return { ...state, todos: [...state.todos] };\n    case DELETE_TODO:\n      return { ...state, todos: [...state.todos.filter((t) => t.id !== action.payload)] };\n    case CURRENT_UPDATE:\n      return { ...state, currentTodo: action.payload };\n    default:\n      return state;\n  }\n};\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { updateCurrent, addNewTodo } from '../reducers/todo';\n\nclass TodoForm extends Component {\n  handleInputChange = (evt) => {\n    const val = evt.target.value;\n    this.props.updateCurrent(val);\n  };\n\n  handleSubmit = (evt) => {\n    evt.preventDefault();\n    this.props.addNewTodo(this.props.currentTodo);\n  };\n\n  render() {\n    const { currentTodo } = this.props;\n\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <input type='text' value={currentTodo} onChange={this.handleInputChange} />\n      </form>\n    );\n  }\n}\n\nexport default connect((state) => ({ currentTodo: state.todo.currentTodo }), { updateCurrent, addNewTodo })(TodoForm);\n","const baseUrl = process.env.REACT_APP_BASE_URL;\n\nexport const getTodos = () => {\n  return fetch(baseUrl).then((res) => res.json());\n};\n\nexport const createTodo = (name) => {\n  return fetch(baseUrl, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({ name: name, isComplete: false }),\n  }).then((res) => res.json());\n};\n\nexport const updateTodo = (todo) => {\n  return fetch(`${baseUrl}/${todo.id}`, {\n    method: 'PUT',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(todo),\n  }).then((res) => res.json());\n};\n\nexport const deleteTodo = (id) => {\n  return fetch(`${baseUrl}/${id}`, {\n    method: 'DELETE',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n    },\n  });\n};\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { fetchTodos, updateExistingTodo, deleteTodoById, getVisibleTodos } from '../reducers/todo';\n\nconst TodoItem = ({ id, isComplete, name, toggleTodo, deleteTodo }) => (\n  <li>\n    <span className='delete-item'>\n      <button onClick={() => deleteTodo(id)}>X</button>\n    </span>\n    <input type='checkbox' checked={isComplete} onChange={() => toggleTodo({ id, name, isComplete: !isComplete })} />{' '}\n    {name}\n  </li>\n);\n\nclass TodoList extends Component {\n  componentDidMount() {\n    this.props.fetchTodos();\n  }\n\n  render() {\n    return (\n      <div className='Todo-List'>\n        <ul>\n          {this.props.todos.map((todo) => (\n            <TodoItem\n              key={todo.id}\n              toggleTodo={this.props.updateExistingTodo}\n              deleteTodo={this.props.deleteTodoById}\n              {...todo}\n            />\n          ))}\n        </ul>\n      </div>\n    );\n  }\n}\n\nexport default connect((state, ownProps) => ({ todos: getVisibleTodos(state.todo.todos, ownProps.filter) }), {\n  fetchTodos,\n  updateExistingTodo,\n  deleteTodoById,\n})(TodoList);\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nconst Message = ({ message }) => (message ? <span className='message'>{message}</span> : null);\n\nexport default connect((state) => ({ message: state.message }))(Message);\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nexport default (props) => (\n  <div>\n    <Link to='/'>All</Link>\n    <Link to='/active'>Active</Link>\n    <Link to='/completed'>Completed</Link>\n  </div>\n);\n","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport logo from './logo.svg';\nimport './App.css';\nimport TodoForm from './components/TodoForm';\nimport TodoList from './components/TodoList';\nimport Message from './components/Message';\nimport Footer from './components/Footer';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className='App'>\n        <header className='App-header'>\n          <img src={logo} className='App-logo' alt='logo' />\n          <h2>Welcome to React with Redux</h2>\n        </header>\n        <Router>\n          <div className='Todo-App'>\n            <Message />\n            <TodoForm />\n            <Route path='/:filter?' render={({ match }) => <TodoList filter={match.params.filter} />} />\n            <Footer />\n          </div>\n        </Router>\n      </div>\n    );\n  }\n}\n\n// export default App;\n// const mapStateToProps = (state) => state;\n// // const mapDispatchToProps = (dispatch) => bindActionCreators({ updateCurrent }, dispatch);\n// const mapDispatchToProps = { updateCurrent };\n// const connectedApp = connect(mapStateToProps, mapDispatchToProps)(App);\n// export default connectedApp;\n\n// Simplify the above redux code\n\n// export default connect((state) => state)(App);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport todoReducer from './reducers/todo';\nimport messageReducer from './reducers/message';\n\nconst reducer = combineReducers({\n  todo: todoReducer,\n  message: messageReducer,\n});\n\nexport default createStore(reducer, composeWithDevTools(applyMiddleware(thunk)));\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store';\n\n// const todoChangeHandler = (payload) => store.dispatch(updateCurrent(payload));\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// const render = () => {\n//   const state = store.getState();\n\n//   ReactDOM.render(\n//     <React.StrictMode>\n//       <App todos={state.todos} currentTodo={state.currentTodo} changeCurrent={actions.updateCurrent} />\n//     </React.StrictMode>,\n//     document.getElementById('root')\n//   );\n// };\n\n// render();\n\n// store.subscribe(render);\n\n/**\n * Sample code to dispatch action\n */\n// setTimeout(() => {\n//   store.dispatch({ type: 'ADD_TODO', payload: { id: 4, name: 'Added todo', isComplete: false } });\n// }, 1000);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}